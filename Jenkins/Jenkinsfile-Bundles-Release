//

pipeline {

  agent {
    node {
      label "unity3d-2019.3-vulkan"
      customWorkspace "/home/jenkins/workspace/simulator-cloud-bundles-release-2019.3.15f1"
    }
  }

  options {
    gitLabConnection("${GITLAB_HOST}")
    skipDefaultCheckout(true)
    buildDiscarder(logRotator(numToKeepStr: '20'))
    timestamps()
  }

  triggers {
    gitlab(triggerOnPush: true, triggerOnMergeRequest: true, branchFilterType: "NameBasedFilter", includeBranchesSpec: "master", excludeBranchesSpec: "")
  }

  parameters {
    booleanParam(name: "FORCE_REBUILD", defaultValue: false, description: "")
    booleanParam(name: "UPLOAD", defaultValue: true, description: "Upload bundles to S3")
    string(name: "BUILD_SIMULATOR_ENVIRONMENTS", defaultValue: "${SIMULATOR_ENVIRONMENTS}", description: "Environments to build")
    string(name: "BUILD_SIMULATOR_VEHICLES", defaultValue: "${SIMULATOR_VEHICLES}", description: "Vehicles to build")
    string(name: "WISE_URL", defaultValue: "${SIMULATOR_WISE_BETA_URL}", description: "Url to use with wise-cli for uploading assets, CLOUD_URL should be used later, not it's separate to test against dev instead of staging")
    credentials(name: "WISE_CONTENT_UPLOAD_CREDENTIALS_ID", required: true, defaultValue: "WISE_CONTENT_UPLOAD_BETA", description: 'The credentials to be used for uploading asset bundles', credentialType: 'com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl')
  }

  environment {
    UNITY_USERNAME = credentials("UNITY_USERNAME")
    UNITY_PASSWORD = credentials("UNITY_PASSWORD")
    UNITY_SERIAL = credentials("UNITY_SERIAL")
    PYTHONUNBUFFERED = "1"
    DISPLAY = ":0"
    JENKINS_BUILD_ID = "${BUILD_ID}"
    GIT_TAG = "${GIT_TAG}"
    S3_DOWNLOAD_HOST = "${S3_RELEASE_DOWNLOAD_HOST}"
    S3_BUCKET_NAME = "${S3_RELEASE_BUCKET_NAME}"
    AWS_ACCESS_KEY_ID = "${AWS_RELEASE_ACCESS_KEY_ID}"
    AWS_SECRET_ACCESS_KEY = "${AWS_RELEASE_SECRET_ACCESS_KEY}"
  }

  stages {
    stage("Checkout Simulator") {
        steps {
            checkout scm
            sh """
                git lfs install
                git lfs pull origin
            """
            sh "rm -rf *.zip *.html *.xml *.log *.txt"

            script {
                env.GIT_COMMIT = sh(returnStdout: true, script: "git rev-parse HEAD").trim()
            }
        }
    }

    stage("Checkout Environments") {
      when {
        not {
            environment name: "BUILD_SIMULATOR_ENVIRONMENTS", value: ""
        }
      }
      steps {
        script {

          def environments = env.BUILD_SIMULATOR_ENVIRONMENTS.split(',')
          def environment_names_list = []

          for (int i=0; i<environments.size(); i++) {
            def environment_path = environments[i]
            def environment_path_parts = environment_path.split('/')
            def environment_name = environment_path_parts.last()

            environment_names_list.add(environment_name)

            checkout([
              $class: "GitSCM",
              branches: [[name: "refs/heads/master"]],
              browser: [$class: "GitLab", repoUrl: "https://${GITLAB_HOST}/HDRP/Environments/${environment_path}", version: env.GITLAB_VERSION],
              extensions: [
                [$class: "RelativeTargetDirectory", relativeTargetDir: "Assets/External/Environments/${environment_name}"],
                [$class: "LocalBranch"],
                [$class: "GitLFSPull"]
              ],
              userRemoteConfigs: [[
                credentialsId: "auto-gitlab",
                url: "git@${GITLAB_HOST}:HDRP/Environments/${environment_path}.git"
              ]]
            ])
          }

          def environment_names = environment_names_list.join(",")

          env.SIM_ENVIRONMENTS = sh(returnStdout: true, script: "./Jenkins/get-assets.sh Assets/External/Environments ${S3_DOWNLOAD_HOST} environment 0 ${environment_names}").trim()
        } // script
        sh "printenv SIM_ENVIRONMENTS | tee environments.txt"
      }

      post {
        success {
            archiveArtifacts "environments.txt"
        }
      }
    }

    stage("Checkout Vehicles") {
      when {
        not {
            environment name: "BUILD_SIMULATOR_VEHICLES", value: ""
        }
      }
      steps {
        script {
          def vehicles = env.BUILD_SIMULATOR_VEHICLES.split(',')
          for (int i=0; i<vehicles.size(); i++) {
            def vehicle = vehicles[i]
            checkout([
              $class: "GitSCM",
              branches: [[name: "refs/heads/master"]],
              browser: [$class: "GitLab", repoUrl: "https://${GITLAB_HOST}/HDRP/Vehicles/${vehicle}", version: env.GITLAB_VERSION],
              extensions: [
                [$class: "RelativeTargetDirectory", relativeTargetDir: "Assets/External/Vehicles/${vehicle}"],
                [$class: "LocalBranch"],
                [$class: "GitLFSPull"]
              ],
              userRemoteConfigs: [[
                credentialsId: "auto-gitlab",
                url: "git@${GITLAB_HOST}:HDRP/Vehicles/${vehicle}.git"
              ]]
            ])
          }

          env.SIM_VEHICLES = sh(returnStdout: true, script: "./Jenkins/get-assets.sh Assets/External/Vehicles ${S3_DOWNLOAD_HOST} vehicle 0 ${BUILD_SIMULATOR_VEHICLES}").trim()
        } // script

        sh "printenv SIM_VEHICLES | tee vehicles.txt"
      }
      post {
        success {
            archiveArtifacts "vehicles.txt"
        }
      }
    }

    stage("Docker") {
      environment {
        DOCKER = credentials("Jenkins-Gitlab")
      }
      steps {
        dir("Jenkins") {
          sh """
            docker login -u ${DOCKER_USR} -p ${DOCKER_PSW} ${GITLAB_HOST}:4567
            docker-compose build build-simulator
            docker-compose push build-simulator
          """
        }
      }
    }

    stage("Build") {
      when {
        anyOf {
          not {
            environment name: "SIM_ENVIRONMENTS", value: ""
          }
          not {
            environment name: "SIM_VEHICLES", value: ""
          }
        }
      }
      steps {
        dir("Jenkins") {
          sh "UID=`id -u` docker-compose run --rm build-bundles"
        }
      }
    } // Build

    stage("Upload") {
      when {
        environment name: "UPLOAD", value: "true"
        anyOf {
          not {
            environment name: "SIM_ENVIRONMENTS", value: ""
          }
          not {
            environment name: "SIM_VEHICLES", value: ""
          }
        }
      }
      steps {
        dir("Jenkins") {
          sh "UID=`id -u` docker-compose run --rm upload-bundles | tee ../upload-bundles.log"
        }
      }
    } // Upload

    stage("Upload-Wise") {
      when {
        environment name: "UPLOAD", value: "true"
        anyOf {
          not {
            environment name: "SIM_ENVIRONMENTS", value: ""
          }
          not {
            environment name: "SIM_VEHICLES", value: ""
          }
        }
      }
      steps {
        withCredentials([usernamePassword(credentialsId: '${WISE_CONTENT_UPLOAD_CREDENTIALS_ID}',
                                          usernameVariable: 'WISE_USERNAME',
                                          passwordVariable: 'WISE_PASSWORD')
                        ])
        {
          dir("Jenkins") {
            sh """
              docker-compose pull upload-bundles-wise
              UID=`id -u` docker-compose run --rm upload-bundles-wise | tee ../upload-bundles-wise.log
              # exit PIPESTATUS[0] cannot be used because of:
              # groovy.lang.MissingPropertyException: No such property: PIPESTATUS for class: groovy.lang.Binding
              exit `grep ^ERROR: ../upload-bundles-wise.log | wc -l`
            """
          }
        }
      }
    } // Upload-Wise

  } // stages

  post {
    failure {
      updateGitlabCommitStatus state: "failed"
    }
    success {
      updateGitlabCommitStatus state: "success"
    }
    always {
        sh script:"zip logs-bundles-${BUILD_ID}.zip *.log || true", label:"Archive log files"
        archiveArtifacts artifacts:"logs*.zip", allowEmptyArchive:true
    }
  }

}
